plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
det(anC)
det(anCRisky)
anCRisky1 <- solve(anCRisky)
anCRisky %*% anCRisky1
a <- sum(anCRisky1 %*% anMuRisky)
b <- c((anMuRisky %*% anCRisky1) %*% anMuRisky)
c <- sum(anCRisky1)
d <- b*c - a^2
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(retRisky))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMuRisky)
mvRandom[i, 2] <- sqrt((x%*%anCRisky)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
k <- 100
elWithout <- matrix(0, ncol = 2, nrow = k)
elWithout[,2] <- seq(sqrt(1/c), 0.5, length.out = k)
for(i in 1:nrow(elWithout)){
elWithout[i,1] <- a/c + sqrt(d/c*(elWithout[i,2]^2 - 1/c))
}
par(new=T)
plot(elWithout[,2], elWithout[,1], type = "l", col = "blue",
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
par(new=T)
plot(sqrt(1/c), a/c,
col = "blue", pch = 4, lwd = 2,
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
(xMVPwithoutRF <- 1/c*rowSums(anCRisky1))
c(a/c, xMVPwithoutRF %*% anMuRisky)
c(sqrt(1/c), sqrt( (xMVPwithoutRF%*%anCRisky)) %*% xMVPwithoutRF)
r <- anMu[7]
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(retRisky))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMuRisky)
mvRandom[i, 2] <- sqrt((x%*%anCRisky)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
k <- 100
elWithout <- matrix(0, ncol = 2, nrow = k)
elWithout[,2] <- seq(sqrt(1/c), 0.5, length.out = k)
for(i in 1:nrow(elWithout)){
elWithout[i,1] <- a/c + sqrt(d/c*(elWithout[i,2]^2 - 1/c))
}
par(new=T)
plot(elWithout[,2], elWithout[,1], type = "l", col = "blue",
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
par(new=T)
plot(sqrt(1/c), a/c,
col = "blue", pch = 4, lwd = 2,
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
elWith <- matrix(0, ncol = 2, nrow = k)
elWith[,2] <- seq(0, 0.5, length.out = k)
for(i in 1:nrow(elWith)){
elWith[i,1] <- r + elWith[i,2]*sqrt(c*r^2 - 2*a*r + b)
}
par(new=T)
plot(elWith[,2], elWith[,1], type = "l", col = "green",
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
(xMarket <- 1/(a-c*r)*anCRisky1%*%(anMuRisky-r))
unname((b-a*r)/(a-c*r))
unname((c*r^2 - 2*a*r + b)/(a-c*r)^2)
rm(a, anCRisky1, b, c, d, elWith, elWithout, i, k, K, mvRandom, r, x)
rm(anC, anCRisky, anRet, anRetRisky, CRisky, xMarket, anMuRisky, muRisky, retRisky, xMVPwithoutRF)
library(Rdonlp2)
install.packages("Rdonlp2")
library(Rdonlp2)
install.packages("Rdonlp2")
install.packages("Rdonlp2", repos="http://R-Forge.R-project.org")
```{r}
library(Rdonlp2)
stepsPerWeight <- 19
wmin <- 0.05
wmax <- 0.95
weights <- seq(wmin, wmax, length.out = stepsPerWeight)
grid <- expand.grid(w1 = weights, w2 = weights, w3 = weights )
grid <- grid[abs(rowSums(grid) - 1.0) < 0.0001,]
rownames(grid) <- 1:nrow(grid)
nrow(grid)
rm(stepsPerWeight, wmin, wmax, weights)
# Return
targetRpa <- 0.06 ## targeted return of 6 % p.a.
# Volatility
targetVolpa <- 0.04 ## % p.a.
IneqA <- matrix(1, nrow = 1, ncol = ncol(ret)) # to take care of investments
library(ggtern)
extractWeightsWithValue <- function(dat, value){
ret <- list()
for(timeWindowName in names(dat)){
for(sentixGroup in names(dat[[timeWindowName]])){
df <- data.frame(w = names(dat[[timeWindowName]][[sentixGroup]])[1], value = dat[[timeWindowName]][[sentixGroup]][[1]][[value]])
df$w <- as.character(df$w)
df$w1 <- as.numeric(unlist(strsplit(df$w, "-"))[1])
df$w2 <- as.numeric(unlist(strsplit(df$w, "-"))[2])
df$w3 <- as.numeric(unlist(strsplit(df$w, "-"))[3])
for(weightsName in names(dat[[timeWindowName]][[sentixGroup]])[2:length(names(dat[[timeWindowName]][[sentixGroup]]))]){
df <- rbind(df, c(weightsName, dat[[timeWindowName]][[sentixGroup]][[weightsName]][[value]], unlist(strsplit(weightsName, "-"))))
}
ret[[timeWindowName]][[sentixGroup]] <- data.frame(w1 = as.numeric(df[,"w1"]),
w2 = as.numeric(df[,"w2"]),
w3 = as.numeric(df[,"w3"]),
value = as.numeric(df[,"value"]))
}
}
return(ret)
}
terntheme <- function(){
theme_rgbg() +
# theme_rgbw()+
theme(legend.position = c(0, 1),
legend.justification = c(0, 1),
plot.margin=unit(c(0, 2,0, 2), "cm"))
# tern.panel.background = element_rect(fill = "lightskyblue1")
}
ternthemeBW <- function(){
theme_bw() +
theme(legend.position = c(0, 1),
legend.justification = c(0, 1),
plot.margin=unit(c(0, 2,0, 2), "cm"))
}
plotTernary <- function(dat, bw=FALSE){
if(bw){
wmax <- dat[which.max(dat$value), c("w1", "w2", "w3", "value")]
ggtern(dat, aes(x=w1, y=w2, z=w3, value=value)) +
geom_point(shape=".")+
geom_text(aes(x=w1, y=w2, label=round(value,1)), data = dat[dat$value>(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"]*0.95),], color = "grey50") +
geom_interpolate_tern(aes(value=value, color = ..level..)) +
geom_point(aes(x=w1, y=w2), dat = wmax, color = "black") +
geom_text(aes(x=w1, y=w2, label=round(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"],1)), data = wmax, color = "black" )+
ternthemeBW() +
Lline(Lintercept =  wmax$w1, colour = "Black", linetype = 2, lwd=1) + ## w1 on Left axis
Tline(Tintercept = wmax$w2, colour = "Black", linetype = 2, lwd=1) + ## w2 on Top axis
Rline(Rintercept = wmax$w3, color = "Black", linetype = 2, lwd=1) + ## w3 on Right axis
scale_color_gradient(low = "grey90", high = "grey0") +
labs(x = "Return", y = "Volatility", z = "Disagreement",
color = "Level")
}else{
wmax <- dat[which.max(dat$value), c("w1", "w2", "w3", "value")]
ggtern(dat, aes(x=w1, y=w2, z=w3, value=value)) +
geom_point(shape=".")+
geom_text(aes(x=w1, y=w2, label=round(value,1)), data = dat[dat$value>(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"]*0.95),]) +
geom_interpolate_tern(aes(value=value, color = ..level..)) +
geom_point(aes(x=w1, y=w2), dat = wmax, color = "red") +
geom_text(aes(x=w1, y=w2, label=round(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"],1)), data = wmax, color = "red" )+
terntheme() +
Lline(Lintercept =  wmax$w1, colour = theme_rgbg()$tern.axis.line.L$colour, linetype = 2, lwd=1) + ## w1 on Left axis
Tline(Tintercept = wmax$w2, colour = theme_rgbg()$tern.axis.line.T$colour, linetype = 2, lwd=1) + ## w2 on Top axis
Rline(Rintercept = wmax$w3, color = theme_rgbg()$tern.axis.line.R$colour, linetype = 2, lwd=1) + ## w3 on Right axis
scale_color_gradient(low = "green", high = "red") +
labs(x = "Return", y = "Volatility", z = "Disagreement",
color = "Level")
# labs(x = "return", y = "variation", z = "dispersion",
#      # title = paste0("Ternary Plot with Sharpe Ratio Contour Lines -", deparse(substitute(dat)), "-", t),
#      color = "Level")
}
}
ternaryPlot <- function(dat, titleFile, bw=FALSE){
lateximport <- c(paste0("\\subsection{", titleFile, "}"))
for(t in names(dat$datesTest)){
plot(plotTernary(dat$datesTest[[t]]))
title <- paste0(titleFile, "-", t, ".pdf")
pdf(file.path(getwd(), "Plot", title), width = 12, height = 10)
plot(plotTernary(dat$datesTest[[t]], bw))
dev.off()
lateximport <- c(lateximport, paste0("\\includegraphics[height=0.45\\textheight]{",title,"}\\linebreak"))
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0", titleFile, ".txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
}
calcTestVar <- function(dat){
res <- list()
for(timeWindowName in names(dat)){
timeWindow <- get(timeWindowName)
retTimeWindow <- ret[timeWindow,]
retTimeWindow <- retTimeWindow[-1,]
colnames(retTimeWindow) <- colnames(ret)
rf <- mean(retTimeWindow[,"BUND"])
for(sentixGroup in names(dat[[timeWindowName]])){
for(goalWeight in names(dat[[timeWindowName]][[sentixGroup]])){
R <- rowSums(dat[[timeWindowName]][[sentixGroup]][[goalWeight]]$x * retTimeWindow)
r <- mean(R)
sd <- sd(R)
anR <- (1+r)^52-1
anSd <- sqrt((sd^2)*52)
fweight = mean(dat[[timeWindowName]][[sentixGroup]][[goalWeight]]$obj)
res[[timeWindowName]][[sentixGroup]][[goalWeight]] <- list(r = r, sd = sd, sr = r/sd,
anR = anR, anSd = anSd, anSR = anR/anSd,
fweight = fweight)
}
}
}
return(res)
}
# Dispersion
targetDisp <- 0.58 ## found as it looks promising and reachable in the analysis (quite low in the reachable values)
hDispDirectMin <- function(x){
y <- numeric(3)
y[1] <- -1.0 * w[1] * drop(crossprod(x, anMuOpt)) / targetRpa
y[2] <- w[2] * drop(sqrt(t(x) %*% anCOpt %*% x)) * sqrt(12) / targetVolpa
y[3] <- w[3] * drop(crossprod(x, anDOpt)) / targetDisp
return(sum(y))
}
library(foreach)
library(parallel) # detectCores()
library(doSNOW)
install.packages("doSNOW")
library(foreach)
library(parallel) # detectCores()
library(doSNOW)
xDispConstTest <- readRDS(file.path(getwd(), "Optimization", "EDispersionMinConstantTest_gloggest2018-12-15---17-03"))
calcEvalTestConst <- function(dat){
res <- list()
for(t in names(dat)){
retTest <- ret[get(t),]
muTest <- apply((1+retTest), 2, function(x) {prod(x)-1}) # total return (over whole period)
sigmaTest <- cov(ret) # variance (over whole period)
rf <- muTest["BUND"]
res[[t]] <- lapply(dat[[t]], function(x) {
lapply(x, function(y){
list(r <- (crossprod(y$x, muTest)-rf), sd <- sqrt(y$x %*% sigmaTest %*% y$x),
sr = r/sd, fweight = y$obj)
})
})
}
return(res)
}
temp <- calcEvalTestConst(xDispConstTest)
rm(temp, cl, calcEvalTestConst, xDispConstTest)
xDispVarTest <- readRDS(file.path(getwd(), "Optimization", "EDispersionMinVaryingTest_gloggest2018-12-15---20-47))
xDispVarTest <- readRDS(file.path(getwd(), "Optimization", "EDispersionMinVaryingTest_gloggest2018-12-15---20-47"))
xDispVarTestCalc <- calcTestVar(xDispVarTest)
srWeightsAn <- extractWeightsWithValue(xDispVarTestCalc, "anSR")
ternaryPlot(srWeightsAn, "Ternary-Dispersion")
dat <- srWeightsAn
titleFile <- "Ternary-Dispersion"
lateximport <- c(paste0("\\subsection{", titleFile, "}"))
names(dat$datesTest)
t <- names(dat$datesTest)[1]
plot(plotTernary(dat$datesTest[[t]]))
dat <- dat$datesTest$P1
dat[which.max(dat$value), c("w1", "w2", "w3", "value")]
wmax <- dat[which.max(dat$value), c("w1", "w2", "w3", "value")]
ggtern(dat, aes(x=w1, y=w2, z=w3, value=value)) +
geom_point(shape=".")+
geom_text(aes(x=w1, y=w2, label=round(value,1)), data = dat[dat$value>(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"]*0.95),], color = "grey50") +
geom_interpolate_tern(aes(value=value, color = ..level..)) +
geom_point(aes(x=w1, y=w2), dat = wmax, color = "black") +
geom_text(aes(x=w1, y=w2, label=round(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"],1)), data = wmax, color = "black" )+
ternthemeBW() +
Lline(Lintercept =  wmax$w1, colour = "Black", linetype = 2, lwd=1) + ## w1 on Left axis
Tline(Tintercept = wmax$w2, colour = "Black", linetype = 2, lwd=1) + ## w2 on Top axis
Rline(Rintercept = wmax$w3, color = "Black", linetype = 2, lwd=1) + ## w3 on Right axis
scale_color_gradient(low = "grey90", high = "grey0") +
labs(x = "Return", y = "Volatility", z = "Disagreement",
color = "Level")
ternaryPlot(srWeightsAn, "Ternary-Dispersion")
rm(dat, titleFile, lateximport)
ternaryPlot(srWeightsAn, "Ternary-Dispersion")
ternaryPlot(dat = srWeightsAn, "Ternary-Dispersion")
plotTernary <- function(dat, bw=FALSE){
if(bw){
wmax <- dat[which.max(dat$value), c("w1", "w2", "w3", "value")]
return(ggtern(dat, aes(x=w1, y=w2, z=w3, value=value)) +
geom_point(shape=".")+
geom_text(aes(x=w1, y=w2, label=round(value,1)), data = dat[dat$value>(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"]*0.95),], color = "grey50") +
geom_interpolate_tern(aes(value=value, color = ..level..)) +
geom_point(aes(x=w1, y=w2), dat = wmax, color = "black") +
geom_text(aes(x=w1, y=w2, label=round(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"],1)), data = wmax, color = "black" )+
ternthemeBW() +
Lline(Lintercept =  wmax$w1, colour = "Black", linetype = 2, lwd=1) + ## w1 on Left axis
Tline(Tintercept = wmax$w2, colour = "Black", linetype = 2, lwd=1) + ## w2 on Top axis
Rline(Rintercept = wmax$w3, color = "Black", linetype = 2, lwd=1) + ## w3 on Right axis
scale_color_gradient(low = "grey90", high = "grey0") +
labs(x = "Return", y = "Volatility", z = "Disagreement",
color = "Level")
)
}else{
wmax <- dat[which.max(dat$value), c("w1", "w2", "w3", "value")]
return(ggtern(dat, aes(x=w1, y=w2, z=w3, value=value)) +
geom_point(shape=".")+
geom_text(aes(x=w1, y=w2, label=round(value,1)), data = dat[dat$value>(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"]*0.95),]) +
geom_interpolate_tern(aes(value=value, color = ..level..)) +
geom_point(aes(x=w1, y=w2), dat = wmax, color = "red") +
geom_text(aes(x=w1, y=w2, label=round(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"],1)), data = wmax, color = "red" )+
terntheme() +
Lline(Lintercept =  wmax$w1, colour = theme_rgbg()$tern.axis.line.L$colour, linetype = 2, lwd=1) + ## w1 on Left axis
Tline(Tintercept = wmax$w2, colour = theme_rgbg()$tern.axis.line.T$colour, linetype = 2, lwd=1) + ## w2 on Top axis
Rline(Rintercept = wmax$w3, color = theme_rgbg()$tern.axis.line.R$colour, linetype = 2, lwd=1) + ## w3 on Right axis
scale_color_gradient(low = "green", high = "red") +
labs(x = "Return", y = "Volatility", z = "Disagreement",
color = "Level")
# labs(x = "return", y = "variation", z = "dispersion",
#      # title = paste0("Ternary Plot with Sharpe Ratio Contour Lines -", deparse(substitute(dat)), "-", t),
#      color = "Level")
)
}
}
ternaryPlot(dat = srWeightsAn, "Ternary-Dispersion")
save.image()
ternaryPlot(dat = srWeightsAn, "Ternary-Dispersion")
library(ggtern)
info()
version()
version
ternaryPlot(dat = srWeightsAn, "Ternary-Dispersion")
install.packages("installr")
library(installr)
updateR()
version
anRet <- (1+ret)^52-1
anMu <- (1+mu)^52-1
anC <- C*52
retRisky <- ret[,-7]
colnames(retRisky)
muRisky <- colMeans(retRisky)
CRisky <- cov(retRisky)
anRetRisky <- (1+retRisky)^52-1
anMuRisky <- (1+muRisky)^52-1
anCRisky <- CRisky*52
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(ret))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMu)
mvRandom[i, 2] <- sqrt((x%*%anC)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(retRisky))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMuRisky)
mvRandom[i, 2] <- sqrt((x%*%anCRisky)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
ternaryPlot(dat = srWeightsAn, "Ternary-Dispersion")
library(ggtern)
install.packages("ggtern")
library(ggtern)
ternaryPlot(dat = srWeightsAn, "Ternary-Dispersion")
anRet <- (1+ret)^52-1
anMu <- (1+mu)^52-1
anC <- C*52
retRisky <- ret[,-7]
colnames(retRisky)
muRisky <- colMeans(retRisky)
CRisky <- cov(retRisky)
anRetRisky <- (1+retRisky)^52-1
anMuRisky <- (1+muRisky)^52-1
anCRisky <- CRisky*52
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(ret))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMu)
mvRandom[i, 2] <- sqrt((x%*%anC)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(retRisky))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMuRisky)
mvRandom[i, 2] <- sqrt((x%*%anCRisky)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
det(anC)
det(anCRisky)
anCRisky1 <- solve(anCRisky)
anCRisky %*% anCRisky1
a <- sum(anCRisky1 %*% anMuRisky)
b <- c((anMuRisky %*% anCRisky1) %*% anMuRisky)
c <- sum(anCRisky1)
d <- b*c - a^2
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(retRisky))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMuRisky)
mvRandom[i, 2] <- sqrt((x%*%anCRisky)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
k <- 100
elWithout <- matrix(0, ncol = 2, nrow = k)
elWithout[,2] <- seq(sqrt(1/c), 0.5, length.out = k)
for(i in 1:nrow(elWithout)){
elWithout[i,1] <- a/c + sqrt(d/c*(elWithout[i,2]^2 - 1/c))
}
par(new=T)
plot(elWithout[,2], elWithout[,1], type = "l", col = "blue",
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
par(new=T)
plot(sqrt(1/c), a/c,
col = "blue", pch = 4, lwd = 2,
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
(xMVPwithoutRF <- 1/c*rowSums(anCRisky1))
c(a/c, xMVPwithoutRF %*% anMuRisky)
c(sqrt(1/c), sqrt( (xMVPwithoutRF%*%anCRisky)) %*% xMVPwithoutRF)
r <- anMu[7]
set.seed(1)
K <- 10000
mvRandom <- matrix(0, ncol = 2, nrow = K)
for(i in 1:nrow(mvRandom)){
x <- rnorm(ncol(retRisky))
x <- x/sum(x) # normalize
mvRandom[i, 1] <- sum(x*anMuRisky)
mvRandom[i, 2] <- sqrt((x%*%anCRisky)%*%x)
}
plot(mvRandom[,2], mvRandom[,1],
xlab = "standard deviation", ylab = "expected return",
xlim = c(0, 0.25), ylim = c(0, 0.5))
k <- 100
elWithout <- matrix(0, ncol = 2, nrow = k)
elWithout[,2] <- seq(sqrt(1/c), 0.5, length.out = k)
for(i in 1:nrow(elWithout)){
elWithout[i,1] <- a/c + sqrt(d/c*(elWithout[i,2]^2 - 1/c))
}
par(new=T)
plot(elWithout[,2], elWithout[,1], type = "l", col = "blue",
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
par(new=T)
plot(sqrt(1/c), a/c,
col = "blue", pch = 4, lwd = 2,
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
elWith <- matrix(0, ncol = 2, nrow = k)
elWith[,2] <- seq(0, 0.5, length.out = k)
for(i in 1:nrow(elWith)){
elWith[i,1] <- r + elWith[i,2]*sqrt(c*r^2 - 2*a*r + b)
}
par(new=T)
plot(elWith[,2], elWith[,1], type = "l", col = "green",
axes = FALSE, xlab = "", ylab = "",
xlim = c(0, 0.25), ylim = c(0, 0.5))
(xMarket <- 1/(a-c*r)*anCRisky1%*%(anMuRisky-r))
unname((b-a*r)/(a-c*r))
unname((c*r^2 - 2*a*r + b)/(a-c*r)^2)
rm(a, anCRisky1, b, c, d, elWith, elWithout, i, k, K, mvRandom, r, x)
rm(anC, anCRisky, anRet, anRetRisky, CRisky, xMarket, anMuRisky, muRisky, retRisky, xMVPwithoutRF)
library(Rdonlp2)
install.packages("Rdonlp2")
install.packages("Rdonlp2", repos="http://R-Forge.R-project.org")
install.packages("Rdonlp2", repos="https://svn.r-project.org/Rmetrics/trunk/Rdonlp2/")
getOption('repos')
install.packages("Rdonlp2", repos="https://cran.cnr.Berkeley.edu/")
install.packages("ggplot2")
loadedNamespaces()
unloadNamespace("ggtern")
loadedNamespaces()
loadedNamespaces("ggplot2")
unloadNamespace("ggplot2")
install.packages("ggplot2")
install.packages("ggtern")
colours <- list(~class, ~drv, ~fl)
# Doesn't seem to do anything!
for (colour in colours) {
ggplot(mpg, aes_(~ displ, ~ hwy, colour = colour)) +
geom_point()
}
library(ggplot2)
library("ggtern", lib.loc="~/R/win-library/3.4")
remove.packages("ggtern", lib="~/R/win-library/3.4")
remove.packages("ggplot2", lib="~/R/win-library/3.4")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("installR")
install.packages("installr")
installr::installr()
