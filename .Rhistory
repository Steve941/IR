tern.panel.background = element_rect(fill = "lightskyblue1"))
}
plotTernary <- function(dat){
wmax <- dat[which.max(dat$value), c("w1", "w2", "w3", "value")]
ggtern(dat, aes(x=w1, y=w2, z=w3, value=value)) +
geom_point(shape=".")+
geom_text(aes(x=w1, y=w2, label=round(value,1)), data = dat[dat$value>(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"]*0.95),]) +
geom_interpolate_tern(aes(value=value, color = ..level..)) +
geom_point(aes(x=w1, y=w2), dat = wmax, color = "red") +
geom_text(aes(x=w1, y=w2, label=round(dat[(dat$w1==wmax$w1) & (dat$w2==wmax$w2),"value"],1)), data = wmax, color = "red" )+
terntheme() +
Lline(Lintercept =  wmax$w1, colour = theme_rgbg()$tern.axis.line.L$colour, linetype = 2, lwd=1) + ## w1 on Left axis
Tline(Tintercept = wmax$w2, colour = theme_rgbg()$tern.axis.line.T$colour, linetype = 2, lwd=1) + ## w2 on Top axis
Rline(Rintercept = wmax$w3, color = theme_rgbg()$tern.axis.line.R$colour, linetype = 2, lwd=1) + ## w3 on Right axis
scale_color_gradient(low = "green", high = "red") +
labs(x = "return", y = "variation", z = "dispersion",
title = paste0("Ternary Plot with Sharpe Ratio Contour Lines -", deparse(substitute(dat)), "-", t),
color = "Level")
}
lateximport <- c(paste0("\\subsection{Ternary}"))
for(t in names(srWeightsAn$datesTest)){
plot(plotTernary(srWeightsAn$datesTest[[t]]))
title <- paste0("Ternary-Weights ",t, ".pdf")
pdf(file.path(getwd(), "Plot", title), width = 10, height = 10)
plot(plotTernary(srWeightsAn$datesTest[[t]]))
dev.off()
lateximport <- c(lateximport, paste0("\\includegraphics[height=0.45\\textheight]{",title,"}\\linebreak"))
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0Ternary.txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
wOptSRAn <- list()
for(timeWindowName in names(srWeightsAn)){
for(sentixGroupName in names(srWeightsAn[[timeWindowName]])){
df <- srWeightsAn[[timeWindowName]][[sentixGroupName]]
wOptSRAn[[timeWindowName]][[sentixGroupName]] <- df[which.max(df$value), c("w1", "w2", "w3")]
}
}
wOptSRAn$datesTest
library(foreach)
library(parallel) # detectCores()
library(doSNOW)
xSentixVarying <- readRDS(file.path(getwd(), "Optimization", "EDispersionMinVaryingEval_Stefan2017-08-29---12-02"))
xSentixVarying
detach("package:doSNOW", unload = T)
detach("package:doSNOW", unload = T)
detach("package:parallel", unload = T)
detach("package:foreach", unload = T)
loadedNamespaces()
library(fPortfolio)
library(FRAPO)
rm(t, title, timeWindowName)
rm(plotTernary, terntheme)
rm(q, res, compareDispRet)
xDispVarEval <- readRDS(file.path(getwd(), "Optimization", "EDispersionMinVaryingEval_Stefan2017-08-29---12-02"))
rm(xSentixVarying)
rm(xDispVarTest, xDispVarTestCalc)
rm(plotTernary, terntheme, fileConnection, lateximport)
rm(sentixGroupName)
xClassicConst <- list()
# convert rownames back to date format (character!)
t <- rownames(ret)
class(t) <- "Date"
rdatTimeSource <- timeSeries(ret, charvec = as.character(t))
# equal weights to start with (maybe)
ew <- rep(1/ncol(ret), ncol(ret))
for(t in datesEvalNames){
timeInd <- datesAll[which(datesAll == min(get(t)))-1] ## one day before start of time window
rdatTime <- window(rdatTimeSource, start = start(rdatTimeSource), end = timeInd) # note: first day is missing as returns miss first day of datesAll (naturally as no return at start)
ans <- tangencyPortfolio(rdatTime)
xClassicConst[[t]][["tanPort"]] <- getWeights(ans)
ans <- minvariancePortfolio(rdatTime)
xClassicConst[[t]][["mVaPort"]] <- getWeights(ans)
C <- cov(rdatTime)
ans <- rp(ew, C, ew, optctrl = ctrl(trace = FALSE))
xClassicConst[[t]][["rp"]] <- c(getx(ans))
ans <- PGMV(rdatTime, optctrl = ctrl(trace = FALSE))
xClassicConst[[t]][["PGMV"]] <- Weights(ans) / 100
ans <- PMD(rdatTime, optctrl = ctrl(trace = FALSE))
xClassicConst[[t]][["PMD"]] <- Weights(ans) / 100
xClassicConst[[t]][["ew"]] <- ew
}
rm(rdatTime, rdatTimeSource)
rm(rdatTime, rdatTimeSource, t)
rm(rdatTime, rdatTimeSource, t, ew)
rm(rdatTime, rdatTimeSource, t, ew, ans)
rm(df)
rm(timeInd)
k <- 50
xClassicVar <- list()
# convert rownames back to date format (character!)
t <- rownames(ret)
class(t) <- "Date"
rdatTimeSource <- timeSeries(ret, charvec = as.character(t))
# equal weights to start with (maybe)
ew <- rep(1/ncol(ret), ncol(ret))
for(timeWindowName in datesEvalNames){
datesEvalNow <- get(timeWindowName)
mat <- matrix(NA, nrow = (length(datesEvalNow)-1), ncol = ncol(rdatTimeSource))
colnames(mat) <- colnames(ret)
rownames(mat) <- datesEvalNow[1:(length(datesEvalNow)-1)]
xClassicVar[[timeWindowName]][["tanPort"]]$x <- mat
xClassicVar[[timeWindowName]][["mVaPort"]]$x <- mat
xClassicVar[[timeWindowName]][["rp"]]$x <- mat
xClassicVar[[timeWindowName]][["PGMV"]]$x <- mat
xClassicVar[[timeWindowName]][["PMD"]]$x <- mat
xClassicVar[[timeWindowName]][["ew"]]$x <- mat
for(d in 1:(length(datesEvalNow)-1)){ # last date no portfolio weights
timeEndInd <- which(datesAll == datesEvalNow[d]) ## one day before start of time window => NO, we can go up to the date
timeEnd <- datesAll[timeEndInd]
timeStart <- datesAll[timeEndInd-k+1]
rdatTime <- timeSeries::window(rdatTimeSource, start = timeStart, end = timeEnd) # note: first day is missing as returns miss first day of datesAll (naturally as no return at start)
ans <- tangencyPortfolio(rdatTime)
xClassicVar[[timeWindowName]][["tanPort"]]$x[d,] <- getWeights(ans)
ans <- minvariancePortfolio(rdatTime)
xClassicVar[[timeWindowName]][["mVaPort"]]$x[d,] <- getWeights(ans)
C <- cov(rdatTime)
ans <- rp(ew, C, ew, optctrl = ctrl(trace = FALSE))
xClassicVar[[timeWindowName]][["rp"]]$x[d,] <- c(getx(ans))
ans <- PGMV(rdatTime, optctrl = ctrl(trace = FALSE))
xClassicVar[[timeWindowName]][["PGMV"]]$x[d,] <- Weights(ans) / 100
ans <- PMD(rdatTime, optctrl = ctrl(trace = FALSE))
xClassicVar[[timeWindowName]][["PMD"]]$x[d,] <- Weights(ans) / 100
xClassicVar[[timeWindowName]][["ew"]]$x[d,] <- ew
}
}
rm(t, timeEnd, timeEndInd, timeStart, timeWindowName, k, ew, rdatTime, rdatTimeSourced, ans)
rm(t, timeEnd, timeEndInd, timeStart, timeWindowName, k, ew, rdatTime, rdatTimeSource, ans)
k <- 50
xClassicVarNoRf <- list()
# convert rownames back to date format (character!)
t <- rownames(ret)
class(t) <- "Date"
rdatTimeSource <- timeSeries(ret, charvec = as.character(t))
# equal weights to start with (maybe)
ew <- rep(1/(ncol(ret)-1), (ncol(ret)-1))
for(timeWindowName in datesEvalNames){
datesEvalNow <- get(timeWindowName)
mat <- matrix(NA, nrow = (length(datesEvalNow)-1), ncol = ncol(rdatTimeSource))
colnames(mat) <- colnames(ret)[1:ncol(rdatTimeSource)]
rownames(mat) <- datesEvalNow[1:(length(datesEvalNow)-1)]
xClassicVarNoRf[[timeWindowName]][["tanPort"]]$x <- mat
xClassicVarNoRf[[timeWindowName]][["mVaPort"]]$x <- mat
xClassicVarNoRf[[timeWindowName]][["rp"]]$x <- mat
xClassicVarNoRf[[timeWindowName]][["PGMV"]]$x <- mat
xClassicVarNoRf[[timeWindowName]][["PMD"]]$x <- mat
xClassicVarNoRf[[timeWindowName]][["ew"]]$x <- mat
for(d in 1:(length(datesEvalNow)-1)){ # last date no portfolio weights
timeEndInd <- which(datesAll == datesEvalNow[d]) ## one day before start of time window => NO, we can go up to the date
timeEnd <- datesAll[timeEndInd]
timeStart <- datesAll[timeEndInd-k+1]
rdatTime <- timeSeries::window(rdatTimeSource, start = timeStart, end = timeEnd) # note: first day is missing as returns miss first day of datesAll (naturally as no return at start)
rf <- mean(rdatTime[,"BUND"])
rdatTime <- rdatTime[,setdiff(names(rdatTime), "BUND")] # reduce to all but BUND
portfolio <- portfolioSpec()
setRiskFreeRate(portfolio) <- rf
ans <- tangencyPortfolio(rdatTime, spec = portfolio)
xClassicVarNoRf[[timeWindowName]][["tanPort"]]$x[d,] <- c(getWeights(ans), 0)
ans <- minvariancePortfolio(rdatTime, spec = portfolio)
xClassicVarNoRf[[timeWindowName]][["mVaPort"]]$x[d,] <- c(getWeights(ans), 0)
C <- cov(rdatTime)
ans <- rp(ew, C, ew, optctrl = ctrl(trace = FALSE))
xClassicVarNoRf[[timeWindowName]][["rp"]]$x[d,] <- c(getx(ans), 0)
ans <- PGMV(rdatTime, optctrl = ctrl(trace = FALSE))
xClassicVarNoRf[[timeWindowName]][["PGMV"]]$x[d,] <- c(Weights(ans) / 100, 0)
ans <- PMD(rdatTime, optctrl = ctrl(trace = FALSE))
xClassicVarNoRf[[timeWindowName]][["PMD"]]$x[d,] <- c(Weights(ans) / 100, 0)
xClassicVarNoRf[[timeWindowName]][["ew"]]$x[d,] <- c(ew, 0)
}
}
rm(t, timeEnd, timeEndInd, timeStart, timeWindowName, k, ew, rdatTime, rdatTimeSource, ans)
detach("package:FRAPO", unload = T)
detach("package:fPortfolio", unload = T)
detach("package:fAssets", unload = T)
detach("package:fBasics", unload = T)
detach("package:fMultivar", unload = T)
detach("package:fCopulae", unload = T)
?fCopulae
detach("package:fCopulae", unload = T)
detach("package:fBasics", unload = T)
detach("package:fBasics", unload = T)
library(fBasics)
detach("package:fBasics", unload = T)
detach("package:fMultivar", unload = T)
library(fBasics)
detach("package:fMultivar", unload = T)
detach("package:fCopulae", unload = T)
detach("package:fBasics", unload = T)
loadNamespace()
loadNamespace()
loadedNamespaces()
detach("fMultivar")
detach("fMultivar")
detach("fMultivar", unload = )
detach("fMultivar", unload = T)
?loadedNamespaces
unloadNamespace("fMultivar")
unloadNamespace("fCopulae")
unloadNamespace("fMultivar")
detach("package:fBasics", unload = T)
library(fBasics)
unloadNamespace("fCopulae")
unloadNamespace("fMultivar")
detach("package:fBasics", unload = T)
detach("package:timeSeries", unload = T)
loadedNamespaces()
detach("package:ggtern", unload = T)
k <- 50
cores <- detectCores()
xDispConstTest <- readRDS(file.path(getwd(), "Optimization", "EDispersionMinConstantTest_gloggest2017-08-28---10-33"))
rm(xDispVarTest, xDispVarTestCalc, calcTestVar)
rm(d, k)
calcEvalVarSentix <- function(dat){
res <- calcEvalVarClassic(dat)
for(timeWindowName in names(dat)){
for(portfolioName in names(dat[[timeWindowName]])){
fweight = mean(dat[[timeWindowName]][[portfolioName]]$obj)
res[[timeWindowName]][[portfolioName]]$fweight <- fweight
}
}
return(res)
}
calcEvalVarClassic <- function(dat){
res <- list()
for(timeWindowName in names(dat)){
timeWindow <- get(timeWindowName)
retTimeWindow <- ret[timeWindow,]
retTimeWindow <- retTimeWindow[-1,]
colnames(retTimeWindow) <- colnames(ret)
rf <- mean(retTimeWindow[,"BUND"])
for(portfolioName in names(dat[[timeWindowName]])){
R <- rowSums(dat[[timeWindowName]][[portfolioName]]$x * retTimeWindow)
turnover <- c(0, rowSums(abs(diff(dat[[timeWindowName]][[portfolioName]]$x)))/2) # start off with 0 to have same length
r <- mean(R)
sd <- sd(R)
anR <- (1+r)^52-1
anSd <- sqrt((sd^2)*52)
res[[timeWindowName]][[portfolioName]] <- list(x = dat[[timeWindowName]][[portfolioName]]$x,
R = R, r = r, sd = sd, sr = r/sd,
anR = anR, anSd = anSd, anSR = anR/anSd,
turnover = turnover)
}
}
return(res)
}
plotPortfolio <- function(data, timeWindowName){
datWork <- data[[timeWindowName]]
timeWindow <- get(timeWindowName)
colBackground <- colsEvalDates[timeWindowName]
retPlot <- data.frame(date = as.integer(as.Date(get(timeWindowName))))# date is read as character, we need double to plot for x-axis
class(retPlot$date) <- "Date"
for(s in names(datWork)){
ret <- cumprod(1+datWork[[s]]$R)
retPlot[[s]] <- c(100, 100*ret)
}
ggplot(retPlot, aes(x=date))+
geom_line(aes(y=retPlot[,2], color = colnames(retPlot)[2]))
plotCommand <- paste0(text = "ggplot(retPlot, aes(x=date))+")
for (i in 2:(ncol(retPlot)-1)){
plotCommand <- paste0(plotCommand, "geom_line(aes(y=retPlot[,",i,"], color = colnames(retPlot)[",i,"])) + ")
}
plotCommand <- paste0(plotCommand, "geom_line(aes(y=retPlot[,",ncol(retPlot),"], color = colnames(retPlot)[",ncol(retPlot),"])) ")
eval(parse(text = plotCommand))+
labs(title = paste("Time:", timeWindowName),
y = "Value",
x = "Date") +
scale_color_discrete(name = "Index")+
theme(panel.background = element_rect(fill = alpha(colBackground, 0.2)))
}
plotWeightsLines <- function(datName, d, s){
dat <- datName[[d]][[s]]$x
dat <- as.data.frame(dat)
dat$date <- as.Date(rownames(dat))
plotCommand <- paste0("ggplot(dat, aes(x=date)) +")
for(i in 1:(ncol(dat)-2)){
plotCommand <- paste0(plotCommand, "geom_line(aes(y=dat[,",i,"], color = colnames(dat)[", i, "])) +")
}
plotCommand <- paste0(plotCommand, "geom_line(aes(y=dat[,",ncol(dat)-1,"], color = colnames(dat)[", ncol(dat)-1, "]))")
eval(parse(text = plotCommand))+
labs(title = paste("Time:", d),
subtitle = paste("Portfolio:", s),
y = "Weight",
x = "Date") +
scale_color_discrete(name = "Index")
}
plotPortfolioComplete <- function(dat, fileName){
lateximport <- c(paste0("\\subsection{",fileName,"}"))
for(d in datesEvalNames){
plotPortfolio(dat, d)
title <- paste0(fileName, "-", d, ".pdf")
pdf(file.path(getwd(), "Plot", title), width = 10, height = 4)
plot(plotPortfolio(dat, d))
dev.off()
lateximport <- c(lateximport, paste0("\\includegraphics[width=\\textwidth]{",title,"}"))
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0",fileName,".txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
}
plotWeightsLinesComplete <- function(dat, fileName){
lateximport <- c(paste0("\\subsection{",fileName,"}"))
for(d in datesEvalNames){
lateximport <- c(lateximport, paste0("\\subsubsection{", fileName, " - ", d, "}"))
for(s in names(dat[[d]])){
# plotWeightsLines(dat, d, s)
title <- paste0(fileName, "-", d,"-", s, ".pdf")
pdf(file.path(getwd(), "Plot", title), width = 10, height = 4)
plot(plotWeightsLines(dat, d, s))
dev.off()
lateximport <- c(lateximport, paste0("\\includegraphics[width=\\textwidth]{",title,"}"))
}
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0",fileName,".txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
}
plotWeightsLines <- function(datName, d, s){
dat <- datName[[d]][[s]]$x
dat <- as.data.frame(dat)
dat$date <- as.Date(rownames(dat))
dat$turnover <- datName[[d]][[s]]$turnover
colBackground <- colsEvalDates[d]
plotCommand <- paste0("ggplot(dat, aes(x=date)) +")
for(i in 1:(ncol(dat)-3)){
plotCommand <- paste0(plotCommand, "geom_line(aes(y=dat[,",i,"], color = colnames(dat)[", i, "])) +")
}
plotCommand <- paste0(plotCommand, "geom_line(aes(y=dat[,",ncol(dat)-2,"], color = colnames(dat)[", ncol(dat)-2, "]))")
eval(parse(text = plotCommand))+
ylim(0, 1)+
geom_bar(aes(y=dat$turnover, colour = "Turnover"), stat = "identity")+
scale_y_continuous(sec.axis = sec_axis(~., name = "Turnover"))+
labs(title = paste("Time:", d),
subtitle = paste("Portfolio:", s),
y = "Weight ",
x = "Date") +
scale_color_discrete(name = "Index") +
theme(panel.background = element_rect(fill = alpha(colBackground, 0.2)))
}
plotWeightsLinesComplete <- function(dat, fileName){
lateximport <- c(paste0("\\subsection{",fileName,"}"))
for(d in datesEvalNames){
lateximport <- c(lateximport, paste0("\\subsubsection{", fileName, " - ", d, "}"))
for(s in names(dat[[d]])){
# plotWeightsLines(dat, d, s)
title <- paste0(fileName, "-", d,"-", s, ".pdf")
pdf(file.path(getwd(), "Plot", title), width = 10, height = 4)
plot(plotWeightsLines(dat, d, s))
dev.off()
lateximport <- c(lateximport, paste0("\\includegraphics[width=\\textwidth]{",title,"}"))
}
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0",fileName,".txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
}
plotWeightsLines <- function(datName, d, s){
dat <- datName[[d]][[s]]$x
dat <- as.data.frame(dat)
dat$date <- as.Date(rownames(dat))
plotCommand <- paste0("ggplot(dat, aes(x=date)) +")
for(i in 1:(ncol(dat)-2)){
plotCommand <- paste0(plotCommand, "geom_line(aes(y=dat[,",i,"], color = colnames(dat)[", i, "])) +")
}
plotCommand <- paste0(plotCommand, "geom_line(aes(y=dat[,",ncol(dat)-1,"], color = colnames(dat)[", ncol(dat)-1, "]))")
eval(parse(text = plotCommand))+
labs(title = paste("Time:", d),
subtitle = paste("Portfolio:", s),
y = "Weight",
x = "Date") +
scale_color_discrete(name = "Index")
}
plotWeightsLinesComplete <- function(dat, fileName){
lateximport <- c(paste0("\\subsection{",fileName,"}"))
for(d in datesEvalNames){
lateximport <- c(lateximport, paste0("\\subsubsection{", fileName, " - ", d, "}"))
for(s in names(dat[[d]])){
# plotWeightsLines(dat, d, s)
title <- paste0(fileName, "-", d,"-", s, ".pdf")
pdf(file.path(getwd(), "Plot", title), width = 10, height = 4)
plot(plotWeightsLines(dat, d, s))
dev.off()
lateximport <- c(lateximport, paste0("\\includegraphics[width=\\textwidth]{",title,"}"))
}
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0",fileName,".txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
}
summaryClassic <- function(datName, d, roundTo = 2){
dat <- datName[[d]]
mat <- matrix(NA, nrow = 3, ncol = length(dat))
rownames(mat) <- c("Mean Return (an)", "Volatility (an)", "Sharpe Ratio (an)")
colnames(mat) <- names(dat)
for(sInd in 1:length(dat)){
mat[1,sInd] <- round(dat[[sInd]]$anR, roundTo)
mat[2,sInd] <- round(dat[[sInd]]$anSd, roundTo)
mat[3,sInd] <- round(dat[[sInd]]$anSR, roundTo)
}
return(mat)
}
library(xtable)
summaryClassicComplete <- function(dat, fileName, roundTo = 2){
lateximport <- c(paste0("\\subsection{",fileName,"}"))
for(d in datesEvalNames){
lateximport <- c(lateximport, paste0("\\subsubsection{", d, "}"))
lateximport <- c(lateximport, print(xtable(summaryClassic(dat, d, roundTo))))
print(summaryClassic(dat, d, roundTo))
}
lateximport <- c(lateximport, "\\clearpage")
fileConnection <- file(file.path(getwd(), "Plot", paste0("0",fileName,".txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
}
wholeAnalysis <- function(dat, fileName){
retDat <- calcEvalVarClassic(dat)
# weights
plotWeightsLinesComplete(retDat, paste0("Weights-", fileName))
# performance of portfolio
plotPortfolioComplete(retDat, paste0("Performance-", fileName))
# summary statistics
summaryClassicComplete(retDat, paste0("Summary-", fileName))
}
for(d in datesEvalNames){
cols <- rainbow(length(xClassicConst[[d]]))
retOverTime <- 1+ret[get(d),]
retPlotDates <- get(d)
retPlotDates <- c(datesAll[which(datesAll==min(retPlotDates))-1], retPlotDates)
retPlot <- data.frame(Datum = retPlotDates)
for(i in names(xClassicConst[[d]])){
retPlot[1,i] <- 100
for(j in 2:nrow(retPlot)){
retPlot[j,i] <- retPlot[j-1,i]*crossprod(xClassicConst[[d]][[i]], retOverTime[j-1,])
}
}
ylim = c(min(retPlot[,-1]), max(retPlot[,-1]))
plot(retPlot[,2], type = "l", ylim = ylim, col = cols[1], main = d, xlab = "Date", ylab = "Value", xaxt='n')
for(i in 3:ncol(retPlot)){
par(new=T)
plot(retPlot[,i], type = "l", ylim = ylim, axes = F, xlab = "", ylab = "", col = cols[i-1])
}
axis(1, at = c(0, 10, 20, 30, 40, 50), labels = retPlot[c(0, 10, 20, 30, 40, 50)+1,1])
legend("bottomright", legend = names(xClassicConst[[d]]), col = cols, lty = 1)
pdf(file.path(getwd(), "Plot", paste0("Performance-ClassicConst", d, ".pdf")), width = 10, height = 8)
plot(retPlot[,2], type = "l", ylim = ylim, col = cols[1], main = d, xlab = "Date", ylab = "Value", xaxt='n')
for(i in 3:ncol(retPlot)){
par(new=T)
plot(retPlot[,i], type = "l", ylim = ylim, axes = F, xlab = "", ylab = "", col = cols[i-1])
}
axis(1, at = c(0, 10, 20, 30, 40, 50), labels = retPlot[c(0, 10, 20, 30, 40, 50)+1,1])
legend("bottomright", legend = names(xClassicConst[[d]]), col = cols, lty = 1)
dev.off()
}
for(d in datesEvalNames){
cols <- rainbow(length(xClassicConst[[d]]))
retOverTime <- 1+ret[get(d),]
retPlotDates <- get(d)
retPlotDates <- c(datesAll[which(datesAll==min(retPlotDates))-1], retPlotDates)
retPlot <- data.frame(Datum = retPlotDates)
for(i in names(xClassicConst[[d]])){
retPlot[1,i] <- 100
for(j in 2:nrow(retPlot)){
retPlot[j,i] <- retPlot[j-1,i]*crossprod(xClassicConst[[d]][[i]], retOverTime[j-1,])
}
}
ylim = c(min(retPlot[,-1]), max(retPlot[,-1]))
plot(retPlot[,2], type = "l", ylim = ylim, col = cols[1], main = d, xlab = "Date", ylab = "Value", xaxt='n')
for(i in 3:ncol(retPlot)){
par(new=T)
plot(retPlot[,i], type = "l", ylim = ylim, axes = F, xlab = "", ylab = "", col = cols[i-1])
}
axis(1, at = c(0, 10, 20, 30, 40, 50), labels = retPlot[c(0, 10, 20, 30, 40, 50)+1,1])
legend("bottomright", legend = names(xClassicConst[[d]]), col = cols, lty = 1)
pdf(file.path(getwd(), "Plot", paste0("Performance-ClassicConst-", d, ".pdf")), width = 10, height = 8)
plot(retPlot[,2], type = "l", ylim = ylim, col = cols[1], main = d, xlab = "Date", ylab = "Value", xaxt='n')
for(i in 3:ncol(retPlot)){
par(new=T)
plot(retPlot[,i], type = "l", ylim = ylim, axes = F, xlab = "", ylab = "", col = cols[i-1])
}
axis(1, at = c(0, 10, 20, 30, 40, 50), labels = retPlot[c(0, 10, 20, 30, 40, 50)+1,1])
legend("bottomright", legend = names(xClassicConst[[d]]), col = cols, lty = 1)
dev.off()
}
wholeAnalysis(xClassicVar, "Classic")
wholeAnalysis(xClassicVarNoRf, "Classic-No-Risk-Free")
wholeAnalysis(xDispVarEval, "Sentix")
retAllVarying <- retPortClassicVarying
View(mat)
retPortClassicVarying <- calcEvalVarClassic(xClassicVar)
retPortSentixVarying <- calcEvalVarClassic(xDispVarEval)
retAllVarying <- retPortClassicVarying
for(timeWindowName in names(retAllVarying)){
retAllVarying[[timeWindowName]] <- append(retAllVarying[[timeWindowName]], retPortSentixVarying[[timeWindowName]])
}
plotPortfolioComplete(retAllVarying, "Performance-All")
summaryClassicComplete(retAllVarying, "SummaryAll")
rm(retPortClassicVarying, retPortSentixVarying, retAllVarying)
rm(grid)
rm(grid, IneqA)
rm(mat)
rm(d, j, j)
rm(i)
rm(calcEvalVarClassic, calcEvalVarSentix, plotPortfolio, plotPortfolioComplete, plotWeightsLines, plotWeightsLinesComplete, summaryClassic, summaryClassicComplete, wholeAnalysis)
rm(temp, cl, calcEvalTestConst, xDispConstTest)
rm(timeWindowName)
rm(ylim)
rm(retPlotDates)
rm(portfolio)
detach("package:parallel", unload = T)
loadedNamespaces()
sort(loadedNamespaces())
unloadNamespace("doParallel")
warnings()
