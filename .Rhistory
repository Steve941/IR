TBOND[,1] <- as.Date(TBOND[,1], format = "%Y-%m-%d")
TBOND[,2] <- as.numeric(as.character(TBOND[,2])) # was a factor first and factors are stored via index of factor level
colnames(TBOND) <- c("Datum", "DGS10")
TBOND <- TBOND[TBOND[,1] %in% datesSentix,]
TBOND <- as.data.frame(TBOND)
stocks$TBOND <- merge(stocks, TBOND, by = "Datum", all.x = T)$DGS10
rm(BUND, DAX, ESX50, NASDAQ, NIKKEI, SP500, TBOND, TEC,
dax, esx50, nasdaq, nikkei, sp500, tec)
detach("package:quantmod", unload = T)
cols <- 8:10
colnames(sentixRaw[[1]])[cols]
unlist(lapply(sentixRaw, function(x) {round(mean(rowSums(x[cols])), 0)}))
rm(cols)
sentixRaw[["TBOND"]] <- NULL
sentixRaw[["TBONDm"]] <- NULL
stocks <- stocks[,-which(colnames(stocks)=="TBOND")]
unlist(lapply(sentixRaw, function(x) {sum(is.na.data.frame(x))}))
colSums(is.na.data.frame(stocks))
cols <- rainbow(ncol(stocks)-1)
plot(stocks[,1], is.na(stocks[,2]), main = "Missing Dates", ylab = "missing", xlab = "Date", col = cols[1], pch = 4)
for(i in 2:(ncol(stocks)-1)){
par(new=T)
plot(stocks[,1], is.na(stocks[,i+1]), col = cols[i], axes = F, xlab = "", ylab = "", pch = 4)
}
legend("right", legend = colnames(stocks)[2:ncol(stocks)], col = cols, lty = 1)
pdf(file.path(getwd(), "Plot", "missingDates.pdf"), width = 10, height = 4)
cols <- rainbow(ncol(stocks)-1)
plot(stocks[,1], is.na(stocks[,2]), main = "Missing Dates", ylab = "missing", xlab = "Date", col = cols[1], pch = 4)
for(i in 2:(ncol(stocks)-1)){
par(new=T)
plot(stocks[,1], is.na(stocks[,i+1]), col = cols[i], axes = F, xlab = "", ylab = "", pch = 4)
}
legend("right", legend = colnames(stocks)[2:ncol(stocks)], col = cols, lty = 1)
dev.off()
rm(cols, i)
nrow(stocks)
nrow(stocks[complete.cases(stocks),])
nrow(stocks) - nrow(stocks[complete.cases(stocks),])
(nrow(stocks) - nrow(stocks[complete.cases(stocks),]))/nrow(stocks)
stocks <- stocks[complete.cases(stocks),]
datesAll <- stocks[,1]
rm(datesSentix)
sentixRaw <- lapply(sentixRaw, function(x) {x[(x[,1] %in% datesAll),]})
unlist(lapply(sentixRaw, nrow))
fxEURUSD <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "data.csv"), sep = ",", skip = 4)
colnames(fxEURUSD) <- c("Datum", "EUR/USD")
fxEURUSD$Datum <- as.Date(fxEURUSD$Datum)
fxEURUSD$`EUR/USD` <- as.numeric(levels(fxEURUSD$`EUR/USD`))[fxEURUSD$`EUR/USD`]
head(fxEURUSD)
fxEURYEN <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "yen_euro.csv"), sep = ",", skip = 4)
colnames(fxEURYEN) <- c("Datum", "EUR/YEN")
fxEURYEN <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "yen_euro.csv"), sep = ";", skip = 4)
colnames(fxEURYEN) <- c("Datum", "EUR/YEN")
fxEURYEN$Datum <- as.Date(fxEURYEN$Datum)
fxEURYEN$`EUR/YEN` <- as.numeric(levels(fxEURYEN$`EUR/YEN`))[fxEURYEN$`EUR/YEN`]
head(fxEURYEN)
fxEURUSD <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "data.csv"), sep = ",", skip = 4)
colnames(fxEURUSD) <- c("Datum", "EUR/USD")
fxEURUSD$Datum <- as.Date(fxEURUSD$Datum)
fxEURUSD$`EUR/USD` <- as.numeric(levels(fxEURUSD$`EUR/USD`))[fxEURUSD$`EUR/USD`]
head(fxEURUSD)
fxEURYEN <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "yen_euro.csv"), sep = ";", dec = ",", skip = 4)
colnames(fxEURYEN) <- c("Datum", "EUR/YEN")
fxEURYEN$Datum <- as.Date(fxEURYEN$Datum)
fxEURYEN$`EUR/YEN` <- as.numeric(levels(fxEURYEN$`EUR/YEN`))[fxEURYEN$`EUR/YEN`]
head(fxEURYEN)
fxEURYEN <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "yen_euro.csv"), sep = ";", dec = ",", skip = 4)
colnames(fxEURYEN) <- c("Datum", "EUR/YEN")
fxEURYEN$Datum <- as.Date(fxEURYEN$Datum)
fxEURUSD <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "data.csv"), sep = ",", skip = 4)
colnames(fxEURUSD) <- c("Datum", "EUR/USD")
fxEURUSD$Datum <- as.Date(fxEURUSD$Datum)
fxEURUSD$`EUR/USD` <- as.numeric(levels(fxEURUSD$`EUR/USD`))[fxEURUSD$`EUR/USD`]
head(fxEURUSD)
fxEURYEN <- read.csv(file.path(getwd(), "Data-New-ExchangeRates", "yen_euro.csv"), sep = ",", skip = 4)
colnames(fxEURYEN) <- c("Datum", "EUR/YEN")
fxEURYEN$Datum <- as.Date(fxEURYEN$Datum)
fxEURYEN$`EUR/YEN` <- as.numeric(levels(fxEURYEN$`EUR/YEN`))[fxEURYEN$`EUR/YEN`]
head(fxEURYEN)
fxEURUSD <- fxEURUSD[fxEURUSD$Datum %in% stocks$Datum,]
fxEURYEN <- fxEURYEN[fxEURYEN$Datum %in% stocks$Datum,]
fxEURUSD <- fxEURUSD[order(fxEURUSD$Datum),]
fxEURYEN <- fxEURYEN[order(fxEURYEN$Datum),]
sum(stocks$Datum != fxEURUSD$Datum) + sum(stocks$Datum != fxEURYEN$Datum)
colSums(is.na(fxEURUSD))
colSums(is.na(fxEURYEN))
stocks$SP500 <- stocks$SP500/fxEURUSD$`EUR/USD`
stocks$NASDAQ <- stocks$NASDAQ/fxEURUSD$`EUR/USD`
stocks$NIKKEI <- stocks$NIKKEI/fxEURYEN$`EUR/YEN`
sDisp <- list()
colnames(sentixRaw[[1]])
groupP <- c("P+", "Pn", "P-")
groupI <- c("I+", "In", "I-")
groupG <- c("G+", "Gn", "G-")
sDispColumn <- function(dat, group){
res <- numeric(nrow(dat))
for(i in 1:length(res)){
res[i] <- var(c(rep(1, dat[i, group[1]]), rep(0, dat[i, group[2]]), rep(-1, dat[i, group[3]])))
}
return(res)
}
names(sentixRaw)
(period1 <- names(sentixRaw)[2*((0:(length(sentixRaw)/2-1)))+1])
(period6 <- names(sentixRaw)[2*((0:(length(sentixRaw)/2-1)))+2])
sDispDataFrame <- function(period, group){
res <- data.frame(Datum = datesAll)
res$DAX <- sDispColumn(sentixRaw[[period[1]]], group)
res$TEC <- sDispColumn(sentixRaw[[period[2]]], group)
res$ESX50 <- sDispColumn(sentixRaw[[period[3]]], group)
res$SP500 <- sDispColumn(sentixRaw[[period[4]]], group)
res$NASDAQ <- sDispColumn(sentixRaw[[period[5]]], group)
res$NIKKEI <- sDispColumn(sentixRaw[[period[6]]], group)
res$BUND <- sDispColumn(sentixRaw[[period[7]]], group)
return(res)
}
sDisp[["P1"]] <- sDispDataFrame(period1, groupP)
sDisp[["P6"]] <- sDispDataFrame(period6, groupP)
sDisp[["I1"]] <- sDispDataFrame(period1, groupI)
sDisp[["I6"]] <- sDispDataFrame(period6, groupI)
sDisp[["G1"]] <- sDispDataFrame(period1, groupG)
sDisp[["G6"]] <- sDispDataFrame(period6, groupG)
# we get a problem as the helping formulas are hard coded
if((ncol(sDisp[[1]])-1) != length(period1))
stop("Fatal error. Check 'sDispDataFrame'. number of Indices changed")
rm(groupP, groupI, groupG, sDispColumn,
period1, period6, sDispDataFrame)
sDisp <- list()
colnames(sentixRaw[[1]])
groupP <- c("P+", "Pn", "P-")
groupI <- c("I+", "In", "I-")
groupG <- c("G+", "Gn", "G-")
sDispColumn <- function(dat, group){
res <- numeric(nrow(dat))
for(i in 1:length(res)){
res[i] <- var(c(rep(1, dat[i, group[1]]), rep(0, dat[i, group[2]]), rep(-1, dat[i, group[3]])))
}
return(res)
}
names(sentixRaw)
(period1 <- names(sentixRaw)[2*((0:(length(sentixRaw)/2-1)))+1])
(period6 <- names(sentixRaw)[2*((0:(length(sentixRaw)/2-1)))+2])
sDispDataFrame <- function(period, group){
res <- data.frame(Datum = datesAll)
res$DAX <- sDispColumn(sentixRaw[[period[1]]], group)
res$TEC <- sDispColumn(sentixRaw[[period[2]]], group)
res$ESX50 <- sDispColumn(sentixRaw[[period[3]]], group)
res$SP500 <- sDispColumn(sentixRaw[[period[4]]], group)
res$NASDAQ <- sDispColumn(sentixRaw[[period[5]]], group)
res$NIKKEI <- sDispColumn(sentixRaw[[period[6]]], group)
res$BUND <- sDispColumn(sentixRaw[[period[7]]], group)
return(res)
}
sDisp[["P1"]] <- sDispDataFrame(period1, groupP)
sDisp[["P6"]] <- sDispDataFrame(period6, groupP)
sDisp[["I1"]] <- sDispDataFrame(period1, groupI)
sDisp[["I6"]] <- sDispDataFrame(period6, groupI)
sDisp[["G1"]] <- sDispDataFrame(period1, groupG)
sDisp[["G6"]] <- sDispDataFrame(period6, groupG)
# we get a problem as the helping formulas are hard coded
if((ncol(sDisp[[1]])-1) != length(period1))
stop("Fatal error. Check 'sDispDataFrame'. number of Indices changed")
rm(groupP, groupI, groupG, sDispColumn,
period1, period6, sDispDataFrame)
sHerf <- list()
colnames(sentixRaw[[1]])
groupP <- c("P+", "Pn", "P-")
groupI <- c("I+", "In", "I-")
groupG <- c("G+", "Gn", "G-")
sHerfColumn <- function(dat, group){
res <- numeric(nrow(dat))
for(i in 1:length(res)){
s <- sum(dat[i, group])
res[i] <- -1*( (dat[i, group[1]]/s)^2 + 2*(dat[i, group[2]]/s)^2 + (dat[i, group[3]]/s)^2 )
}
return(res)
}
names(sentixRaw)
(period1 <- names(sentixRaw)[2*((0:(length(sentixRaw)/2-1)))+1])
(period6 <- names(sentixRaw)[2*((0:(length(sentixRaw)/2-1)))+2])
sHerfDataFrame <- function(period, group){
res <- data.frame(Datum = datesAll)
res$DAX <- sHerfColumn(sentixRaw[[period[1]]], group)
res$TEC <- sHerfColumn(sentixRaw[[period[2]]], group)
res$ESX50 <- sHerfColumn(sentixRaw[[period[3]]], group)
res$SP500 <- sHerfColumn(sentixRaw[[period[4]]], group)
res$NASDAQ <- sHerfColumn(sentixRaw[[period[5]]], group)
res$NIKKEI <- sHerfColumn(sentixRaw[[period[6]]], group)
res$BUND <- sHerfColumn(sentixRaw[[period[7]]], group)
return(res)
}
sHerf[["P1"]] <- sHerfDataFrame(period1, groupP)
sHerf[["P6"]] <- sHerfDataFrame(period6, groupP)
sHerf[["I1"]] <- sHerfDataFrame(period1, groupI)
sHerf[["I6"]] <- sHerfDataFrame(period6, groupI)
sHerf[["G1"]] <- sHerfDataFrame(period1, groupG)
sHerf[["G6"]] <- sHerfDataFrame(period6, groupG)
# we get a problem as the helping formulas are hard coded
if((ncol(sHerf[[1]])-1) != length(period1))
stop("Fatal error. Check 'sHerfDataFrame'. number of Indices changed")
rm(groupP, groupI, groupG, sHerfColumn,
period1, period6, sHerfDataFrame)
ret <- as.matrix(stocks[2:nrow(stocks),2:ncol(stocks)]/stocks[1:(nrow(stocks)-1),2:ncol(stocks)] - 1)
rownames(ret) <- stocks[2:nrow(stocks), 1]
mu <- colMeans(ret)
C <- cov(ret)
# sentixRaw <- lapply(sentixRaw, function(x) {x <- x[2:nrow(x), ]})
# sDisp <- lapply(sDisp, function(x) {x <- x[2:nrow(x), ]})
# sHerf <- lapply(sHerf, function(x) {x <- x[2:nrow(x), ]})
#
# stocks <- stocks[2:nrow(stocks), ]
# datesAll <- datesAll[2:nrow(datesAll)]
l <- 50
retWindow <- matrix(0, nrow = nrow(ret)-l+1, ncol = ncol(ret))
rownames(retWindow) <- rownames(ret)[l:nrow(ret)]
class(rownames(retWindow)) <- "Date"
for(i in 1:nrow(retWindow)){
retWindow[i,] <- apply(ret[i:(i+l-1),]+1, 2, function(x) prod(x)-1) # 2 -> columnwise
}
retTotal <- numeric(nrow(retWindow))
retTotal <- apply(retWindow, 1, mean) # 1 -> rowwise
names(retTotal) <- rownames(retWindow)
plot(retTotal)
# old code
iMin <- which(retTotal==min(retTotal))
iMax <- which(retTotal==max(retTotal))
# adopted code
retTotal[270:300]
iMin <- which(retTotal == min(retTotal[270:300]))
iMax <- which(retTotal==max(retTotal))
which(retTotal==min(retTotal))
# dates of which the returns have been calculated
datesEvalBear <- rownames(ret)[(iMin):(iMin+l-1)]
datesEvalBull <- rownames(ret)[(iMax):(iMax+l-1)]
class(datesEvalBear) <- "Date"
class(datesEvalBull) <- "Date"
plot(retTotal, type = "l", axes = FALSE, main = "returns over the time window")
abline(v = iMin, col = "red", lwd = 2)
abline(v = iMax, col = "green", lwd = 2)
axis(1, pretty(1:length(retTotal)), names(retTotal)[pretty(1:length(retTotal))+1])
axis(2)
datesEvalLast <- rownames(ret)[(nrow(ret)-l+1):nrow(ret)]
class(datesEvalLast) <- "Date"
startDateTest <- 50
timeBefore <- 50
( startEvalTime <- which(datesAll == min(c(min(datesEvalBear), min(datesEvalBull), min(datesEvalLast)))) )
datesTest <- rownames(ret)[startDateTest:(startEvalTime-timeBefore)]
class(datesTest) <- "Date"
length(datesTest)
datesEvalAllAfterTest <- rownames(ret)[(max(which(rownames(ret) %in% datesTest))+1):nrow(ret)]
class(datesEvalAllAfterTest) <- "Date"
tmp <- rownames(ret)
class(tmp) <- "Date"
tmp <- as.character(tmp)
datesEvalRecNBER <- rownames(ret)[min(which(substring(tmp, 1,7) == "2007-12")):max(which(substring(tmp, 1, 7) == "2009-06"))]
class(datesEvalRecNBER) <- "Date"
datesEvalNames <- c(deparse(substitute(datesEvalBear)), deparse(substitute(datesEvalRecNBER)), deparse(substitute(datesEvalBull)), deparse(substitute(datesEvalLast)), deparse(substitute(datesEvalAllAfterTest)))
datesTestNames <- c(deparse(substitute(datesTest)))
rm(l, i)
rm(retWindow, retTotal)
rm(iMin, iMax, startDateTest, startEvalTime, timeBefore)
colsEvalDates <- c("red", "darkred", "green", "orange", "yellow")
names(colsEvalDates) <- datesEvalNames
plotData <- function(x, title = "Indices", bw = FALSE){
if(bw){
}else{
# lines with data
geomLineDataDAX <- function(x){
parse(text = paste0("geom_line(data = ", x, ", aes(x = Datum, y = DAX, colour = \"DAX\"))"))
}
geomLineDataTEC <- function(x){
parse(text = paste0("geom_line(data = ", x, ", aes(x = Datum, y = TEC, colour = \"TEC\"))"))
}
geomLineDataESX50 <- function(x){
parse(text = paste0("geom_line(data = ", x, ", aes(x = Datum, y = ESX50, colour = \"ESX50\"))"))
}
geomLineDataSP5 <- function(x){
parse(text = paste0("geom_line(data = ", x, ", aes(x = Datum, y = SP5, colour = \"SP5\"))"))
}
geomLineDataNASDAQ <- function(x){
parse(text = paste0("geom_line(data = ", x, ", aes(x = Datum, y = NASDAQ, colour = \"NASDAQ\"))"))
}
geomLineDataNIKKEI <- function(x){
parse(text = paste0("geom_line(data = ", x, ", aes(x = Datum, y = NIKKEI, colour = \"NIKKEI\"))"))
}
geomLineDataBUND <- function(x){
parse(text = paste0("geom_line(data = ", x, ", aes(x = Datum, y = BUND, colour = \"BUND\"))"))
}
# rectangle for date period
geomRectDateBear <- function(){
parse(text = "geom_rect(aes(xmin = min(datesEvalBear), xmax = max(datesEvalBear), ymin = -Inf, ymax = Inf), alpha = 0.2 , fill = \"red\")")}
geomRectDateRecNBER <- function(){
parse(text = "geom_rect(aes(xmin = min(datesEvalRecNBER), xmax = max(datesEvalRecNBER), ymin = -Inf, ymax = Inf), alpha = 0.2 , fill = \"darkred\")")}
geomRectDateBull <- function(){
parse(text = "geom_rect(aes(xmin = min(datesEvalBull), xmax = max(datesEvalBull), ymin = -Inf, ymax = Inf), alpha = 0.2 , fill = \"green\")")}
# geomRectDateLast <- function(){
#   parse(text = "geom_rect(aes(xmin = min(datesEvalLast), xmax = max(datesEvalLast), ymin = -Inf, ymax = Inf), alpha = 0.2 , fill = \"orange\")")}
geomRectDateTest <- function(){
parse(text = "geom_rect(aes(xmin = min(datesTest), xmax = max(datesTest), ymin = -Inf, ymax = Inf), alpha = 0.2 , fill = \"blue\")")}
ggplot() +
eval(geomLineDataDAX(x)) +
eval(geomLineDataTEC(x)) +
eval(geomLineDataESX50(x)) +
eval(geomLineDataNASDAQ(x)) +
eval(geomLineDataNIKKEI(x)) +
eval(geomLineDataBUND(x)) +
# eval(geomRectDateLast()) +
eval(geomRectDateBear()) +
eval(geomRectDateRecNBER()) +
eval(geomRectDateBull()) +
eval(geomRectDateTest()) +
labs(x = "Time", y = "Value") +
labs(title = title) +
theme(plot.title = element_text(hjust = 0.5)) # align title in center
}
}
## if a special name is given, take it, otherwise take x (plot sentix by using same dataframe (adopted))
plotDataPDF <- function(x, xName = x){
pdf(file.path(getwd(), "Plot", paste0(xName, ".pdf")), width = 10, height = 4)
plot(plotData(x))
dev.off()
}
# ePlot <- new.env() # environment to store functions (doesn't work)
# ls.str(envir = ePlot)
# geomLineData <- function(x){
#     parse(text = paste0("eval(geomLineDataDAX(\"", x , "\")) + eval(geomLineDataTEC(\"", x , "\"))"))
# }
#
# ggplot() +
#     eval(geomLineData("retPlot")) +
#     eval(geomRectDateLast) +
#     labs(x = "Time", y = "Value")
retPlot <- matrix(100, nrow = nrow(stocks), ncol = ncol(stocks)-1)
retPlot[2:nrow(stocks), ] <- 1+ret # to multiply lateron, we have to add 1
retPlot <- apply(retPlot, 2, cumprod)
rownames(retPlot) <- stocks[,1]
xNames <- rownames(retPlot)
class(xNames) <- "Date"   # convert to date
cols <- rainbow(ncol(retPlot))
ylim <- c(min(retPlot), max(retPlot))
plot(xNames, retPlot[,1], type = "l", xlab = "Date", ylab = "Value", main = "Indices over time",
col = cols[1], ylim = ylim)
for(sentixGroup in 2:ncol(retPlot)){
par(new=T)
plot(xNames, retPlot[,sentixGroup], type = "l", col = cols[sentixGroup], axes = F, xlab="", ylab="", ylim = ylim)
}
legend("topleft", legend = colnames(stocks)[2:ncol(stocks)], col = cols, lty = 1)
rm(retPlot, xNames, ylim, sentixGroup)
library(ggplot2)
retPlot <- matrix(100, nrow = nrow(stocks), ncol = ncol(stocks)-1)
retPlot[2:nrow(stocks), ] <- 1+ret # to multiply lateron, we have to add 1
retPlot <- apply(retPlot, 2, cumprod)
retPlot <- as.data.frame(retPlot)
colnames(retPlot) <- colnames(stocks)[2:ncol(stocks)]
retPlot$Datum <- stocks[,1]
class(retPlot$Datum) <- "Date"   # convert to date
cols <- rainbow(ncol(retPlot))
ylim <- c(min(retPlot[,1:(ncol(retPlot)-1)]), max(retPlot[,1:(ncol(retPlot)-1)]))
plotData("retPlot")
plotDataPDF("retPlot")
## plot Data Black White (print)
library(tidyverse)
retPlotLong <- gather(retPlot, index, value, -Datum)
retPlotLong$index <- factor(retPlotLong$index)
bearMinMax <- data.frame("date" = c(min(datesEvalBear), max(datesEvalBear)))
RecNBERMinMax <- data.frame("date" = c(min(datesEvalRecNBER), max(datesEvalRecNBER)))
bullMinMax <- data.frame("date" = c(min(datesEvalBull), max(datesEvalBull)))
TestSplit <- data.frame("date" = min(datesEvalAllAfterTest))
pdf(file.path(getwd(), "Plot", paste0("retPlot-BW", ".pdf")), width = 10, height = 4)
ggplot(retPlotLong, aes(x = Datum, y=value, col=index, linetype = index)) +
geom_line(lwd=1) +
scale_color_grey() +
scale_linetype_discrete() +
geom_vline(data = bearMinMax, aes(xintercept=as.numeric(date)),
linetype=4, colour="black") +
geom_vline(data = RecNBERMinMax, aes(xintercept=as.numeric(date)),
linetype=3, colour="black") +
geom_vline(data = bullMinMax, aes(xintercept=as.numeric(date)),
linetype=2, colour="black") +
geom_vline(data = TestSplit, aes(xintercept=as.numeric(date)),
linetype=1, colour="black") +
theme_bw()+
labs(x = "Time", y = "Value", colour = "Index", linetype = "Index")
dev.off()
# rm(retPlot, cols, ylim)
## plot Data Black White (print)
library(tidyverse)
library(ggtern)
retPlotLong <- gather(retPlot, index, value, -Datum)
retPlotLong$index <- factor(retPlotLong$index)
bearMinMax <- data.frame("date" = c(min(datesEvalBear), max(datesEvalBear)))
RecNBERMinMax <- data.frame("date" = c(min(datesEvalRecNBER), max(datesEvalRecNBER)))
bullMinMax <- data.frame("date" = c(min(datesEvalBull), max(datesEvalBull)))
TestSplit <- data.frame("date" = min(datesEvalAllAfterTest))
pdf(file.path(getwd(), "Plot", paste0("retPlot", ".pdf")), width = 10, height = 4)
ggplot(retPlotLong, aes(x = Datum, y=value, col=index)) +
geom_line(lwd=1) +
# scale_color_grey() +
geom_vline(data = bearMinMax, aes(xintercept=as.numeric(date)),
linetype=4, colour="black") +
geom_vline(data = RecNBERMinMax, aes(xintercept=as.numeric(date)),
linetype=3, colour="black") +
geom_vline(data = bullMinMax, aes(xintercept=as.numeric(date)),
linetype=2, colour="black") +
geom_vline(data = TestSplit, aes(xintercept=as.numeric(date)),
linetype=1, colour="black") +
# theme_rgbg() +
theme_bw()+
labs(x = "Time", y = "Value", colour = "Index")
dev.off()
# rm(retPlot, cols, ylim)
lateximport <- c(paste0("\\subsection{Dispersion}"))
for(sentixGroup in names(sDisp)){
title <- paste0("sDisp-", sentixGroup)
sPlot <- sDisp[[sentixGroup]]
plotDataPDF("sPlot", title)
lateximport <- c(lateximport, paste0("\\includegraphics[width=\\textwidth]{",paste0(title, ".pdf"),"}\\linebreak"))
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0sentixDisp.txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
rm(sPlot, sentixGroup, lateximport, fileConnection)
lapply(sDisp, function(x) {base::summary(x[,-1], digits = 2)})
lateximport <- c(paste0("\\subsection{Herfindahl}"))
for(sentixGroup in names(sHerf)){
title <- paste0("sHerf-", sentixGroup)
sPlot <- sHerf[[sentixGroup]]
plotDataPDF("sPlot", title)
lateximport <- c(lateximport, paste0("\\includegraphics[width=\\textwidth]{",paste0(title, ".pdf"),"}\\linebreak"))
}
fileConnection <- file(file.path(getwd(), "Plot", paste0("0sentixHerf.txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
rm(sPlot, sentixGroup, lateximport, fileConnection)
lapply(sHerf, function(x) {base::summary(x[,-1], digits = 2)})
q <- 0.1
compareSentRet <- function(n, m=0, dat){
res <- matrix(NA, nrow = ncol(ret), ncol = length(dat))
rownames(res) <- colnames(ret)
colnames(res) <- names(dat)
for(d in 1:length(dat)){
for(s in 1:ncol(ret)){
tmp <- data.frame(disp = dat[[d]][2:(nrow(dat[[d]])-n+1-m),s+1]) # 2 as returns start one date behind
for(k in 1:(nrow(ret)-n+1-m)){
tmp[k,"r"] <- prod(1+ret[(k+m):(k+m+n-1),s])-1
}
tmp <- tmp[order(tmp$disp),] # ascending by default
res[s, d] <- round( mean(tmp[1:(q*nrow(tmp)),"r"]) - mean(tmp[((1-q)*nrow(tmp)):nrow(tmp), "r"]) , 3)
}
}
return(res)
}
res <- compareSentRet(1, dat = sDisp)
res
matrix(rank(res), ncol = ncol(res), dimnames = list(rownames(res), colnames(res)))
res <- compareSentRet(1, 1, dat = sDisp)
res
matrix(rank(res), ncol = ncol(res), dimnames = list(rownames(res), colnames(res)))
res <- compareSentRet(3, dat = sDisp)
res
matrix(rank(res), ncol = ncol(res), dimnames = list(rownames(res), colnames(res)))
res <- compareSentRet(6, dat = sDisp)
res
matrix(rank(res), ncol = ncol(res), dimnames = list(rownames(res), colnames(res)))
library(xtable)
compareOverview <- function(nVec, mVec, dat){
res <- list()
for(sentixGroup in names(dat)){
rowVec <- integer()
for(n in nVec){
rowVec <- c(rowVec, n, rep("", ncol(ret))) # one empty line
}
res[[sentixGroup]] <- data.frame(Periods = rowVec)
}
# fill each column rowwise
for(m in c(0,2,4)){
# again reserve space first
for(sentixGroup in names(dat)){
res[[sentixGroup]] <- cbind(res[[sentixGroup]], setNames(data.frame(rep(c(colnames(ret), ""), length(nVec))), paste("Lag", m)))
res[[sentixGroup]] <- cbind(res[[sentixGroup]], as.data.frame(matrix("", ncol=1, nrow=(length(nVec)*(ncol(ret)+1))), stringsAsFactors = F))
}
for(n in c(1,3,6)){
tmp <- as.data.frame(compareSentRet(n, m, dat))
# assign the values
for(sentixGroup in names(dat)){
res[[sentixGroup]][((ncol(ret)+1)*(which(n==nVec)-1)+1):((ncol(ret)+1)*which(n==nVec)-1),
(1+(2*which(m==mVec)))] <- tmp[, sentixGroup]
}
}
}
return(res)
}
compareOverviewTXT <- function(nVec, mVec, dat, fileName){
res <- compareOverview(nVec, mVec, dat)
lateximport <- c(paste0("\\subsection{", fileName, "}"))
for(sentixGroup in names(sDisp)){
lateximport <- c(lateximport, paste0("\\subsubsection{", sentixGroup, "}"))
lateximport <- c(lateximport, print(xtable(res[[sentixGroup]]), floating = FALSE))
}
lateximport <- c(lateximport, "\\clearpage")
fileConnection <- file(file.path(getwd(), "Plot", paste0("0Analysis", fileName,".txt")))
writeLines(lateximport, fileConnection)
close(fileConnection)
}
# initialize
nVec <- c(1,3,6)
mVec <- c(0,2,4)
compareOverviewTXT(nVec, mVec, sDisp, "Dispersion")
# initialize
nVec <- c(1,3,6)
mVec <- c(0,2,4)
compareOverviewTXT(nVec, mVec, sHerf, "Herfindahl")
rm(q, res, compareSentRet)